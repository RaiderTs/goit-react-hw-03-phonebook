{"version":3,"sources":["components/Filter/Filter.module.css","components/Form/Form.module.css","components/Form/Form.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","Form","state","name","number","handleChange","target","value","setState","handleSubmit","event","preventDefault","AddContact","props","validateForm","id","shortid","generate","reset","onUnique","toast","error","this","className","style","form","onSubmit","label","input","type","placeholder","onChange","button","Component","ContactList","contacts","onRemove","length","list","map","item","info","btn","onClick","Filter","filter","App","handleAddContact","newContact","handleCheckUniqueContact","onExistContact","find","contact","handleRemoveContact","handleFilterChange","onFilterContacts","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","nextContacts","console","log","setItem","stringify","filterContacts","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.300c1a6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__5gc36\",\"input\":\"Filter_input__2V8Bv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2lwJ-\",\"label\":\"Form_label__ld9PA\",\"input\":\"Form_input__1nG8n\",\"button\":\"Form_button__1RTIy\"};","import React, { Component } from 'react';\r\nimport style from './Form.module.css';\r\nimport shortid from 'shortid'; // Не забыть дабавить динамический ID\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { AddContact } = this.props;\r\n\r\n    const isValidateForm = this.validateForm();\r\n\r\n    if (!isValidateForm) return;\r\n\r\n    AddContact({ id: shortid.generate(), name, number });\r\n\r\n    this.reset();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    const { onUnique } = this.props;\r\n    if (!name || !number) {\r\n      toast.error('One of the fields is not filled');\r\n      return false;\r\n    }\r\n    return onUnique(name);\r\n  };\r\n\r\n  reset = () => this.setState({ name: '', number: '' });\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={style.form} onSubmit={this.handleSubmit}>\r\n        <label className={style.label}>\r\n          Name\r\n          <input\r\n            className={style.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Enter name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label className={style.label}>\r\n          number\r\n          <input\r\n            className={style.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"Enter phone number\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button className={style.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import PropTypes from \"prop-types\";\r\nimport style from \"./ContactList.module.css\";\r\n\r\nfunction ContactList({ contacts, onRemove }) {\r\n  if (contacts.length === 0) return null;\r\n  return (\r\n    <ul className={style.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={style.item} key={id}>\r\n          <p className={style.info}>\r\n            {name}: {number}\r\n          </p>\r\n          <button className={style.btn} onClick={() => onRemove(id)}>\r\n            Remove\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// const ContactListItem = ({ id, name, phone, onRemove }) => {\r\n//   return (\r\n//     <li className={style.item} key={id}>\r\n//       <p className={style.info}>\r\n//         {name}: {phone}\r\n//       </p>\r\n//       {/* С контактом на будет приходить ID, по нему будем удалять контакт. Вставляем его в метод onREMOVE */}\r\n// <button className={style.btn} onClick={() => onRemove(id)}>\r\n//   Remove\r\n// </button>\r\n//     </li>\r\n//   );\r\n// };\r\n// // Пишем компонент для разметки текста\r\n// // В него приходит наш массив контактов и метод Remove\r\n// const ContactsList = ({ contacts, onRemove }) => {\r\n//   // проверяем наличие контактов\r\n//   if (contacts.length === 0) return null; // т.е. список контактов не отрендерится\r\n//   // Если все хорошо возвращаем список\r\n//   return (\r\n//     <ul className={style.list}>\r\n//       {contacts.map((contact) => (\r\n//         <ContactListItem {...contact} onRemove={onRemove} />\r\n//       ))}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\n// ContactListItem.propTypes = {\r\n//   id: PropTypes.string.isRequired,\r\n//   name: PropTypes.string.isRequired,\r\n//   phone: PropTypes.string,\r\n//   onRemove: PropTypes.func.isRequired,\r\n// };\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport style from './Filter.module.css';\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <label className={style.label}>\r\n      Enter name for search\r\n      <input\r\n        className={style.input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={({ target }) => onChange(target.value)}\r\n        placeholder=\"Enter a name to search\"\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { Component } from 'react';\nimport Form from './components/Form/Form.jsx';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport Filter from './components/Filter/Filter.jsx';\nimport { ToastContainer, toast } from 'react-toastify'; \nimport 'react-toastify/dist/ReactToastify.css'; \n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    // console.log('App componentDidMount');\n\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      console.log('Обновилось поле contacts, записываю contacts в хранилище');\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  handleAddContact = newContact =>\n    this.setState(({ contacts }) => ({\n      contacts: [...contacts, newContact],\n    }));\n\n  handleCheckUniqueContact = name => {\n    const { contacts } = this.state;\n    const onExistContact = !!contacts.find(contact => contact.name === name);\n    onExistContact && toast.error('Contact already exists');\n\n    return !onExistContact;\n  };\n\n  handleRemoveContact = id =>\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(contact => contact.id !== id),\n    }));\n\n  handleFilterChange = filter => this.setState({ filter });\n\n  onFilterContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const filterContacts = this.onFilterContacts();\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <Form\n          AddContact={this.handleAddContact}\n          onUnique={this.handleCheckUniqueContact}\n        />\n        <h2>Contacts List</h2>\n        <Filter filter={filter} onChange={this.handleFilterChange} />\n        <ContactList\n          contacts={filterContacts}\n          onRemove={this.handleRemoveContact}\n        />\n        <ToastContainer autoClose={3000} />\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'modern-normalize/modern-normalize.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__uDRLM\",\"item\":\"ContactList_item__wxnGC\",\"btn\":\"ContactList_btn__PB5JE\"};"],"sourceRoot":""}